class Solution {
public:
    int numSubarrayProductLessThanK(vector<int>& nums, int k) {
        ios_base::sync_with_stdio(false);
        cin.tie(nullptr);
        cout.tie(nullptr);

        if(k<=1){
            return 0;
        }

        int n=nums.size();
        int i=0,j=0,count=0,pro=1;

        while(j<n){
            pro*=nums[j];

            while(pro>=k){
                pro=pro/nums[i];
                i++;
            }

            count+=(j-i+1);
            j++;
        }

        return count;
    }
};

//---------------------------------------------------------------------------#
//This problem can be solved using sliding window approach, we will take two pointers i and j.
//pro will store the product of the current subarray.
//We will move the j pointer towards right.
//If we get product of subarray >=k then we will divide pro with the element at i and move i to the right.
//count will store the answer, so j-i+1 will give the number of subarrays possible for given i and j which have product less than k.
//Finally, we return count.
