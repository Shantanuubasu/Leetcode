class Solution {
public:
    bool isIsomorphic(string s, string t) {
        ios::sync_with_stdio(false);
        cin.tie(nullptr);
        cout.tie(nullptr);

        unordered_map<char,char> m1;
        unordered_map<char,char> m2;
        int n=s.length();

        for(int i=0; i<n; i++){
            char ch1=s[i];
            char ch2=t[i];

            if((m1.find(ch1)!=m1.end() && m1[ch1]!=ch2) || (m2.find(ch2)!=m2.end() && m2[ch2]!=ch1)){
                return false;
            }

            m1[ch1]=ch2;
            m2[ch2]=ch1;
        }

        return true;
    }
};

//----------------------------------------------------------------------------------------------------
//1. To solve this problem we will use 2 unordered map, m1 and m2.
//2. We will make a character of s to its corresponding character in t in m1 and similarly map a character of t to its corresponding character in s in m2.
//3. We will now traverse in either string, and find if ch1 is present in the map m1 or not and mapping of ch1 is done to ch2 or not.
//4. Similarly, We will also check if ch2 is present in m2 or not and mapping of ch2 is done ch1 or not.
//5. If the above conditions don't satisfy then we will return false.
//6. Finally, we return true.
